version: '3'

networks:
  bank-network:
    name: bank-network
    external: false
    driver: bridge
  customer-network:
    name: customer-network
    driver: bridge
    external: false

services:
  db:
    container_name: customer-db
    image: "postgres"
    ports:
      - "5432:5432"
    healthcheck:
      test: pg_isready -U $$POSTGRES_USER
      interval: 10s
      timeout: 3s
      retries: 3
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1111
    volumes:
      - db_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - customer-network

  app:
    container_name: customer-app
    build: .
    ports:
      - "8082:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db/postgres
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 1111
      JDBC_DRIVER: org.postgresql.Driver
      JDBC_URL: jdbc:postgresql://db/postgres
      JDBC_USERNAME: postgres
      JDBC_PASSWORD: 1111
      SPRING_KAFKA_BOOTSTRAP-SERVERS: "customer-kafka:9092"
      KAFKA_TOPIC-NAME_TRANSFER-AMOUNT: transferAmount
      KAFKA_TYPE-MAPPING_PAYMENT: "payment"
      SPRING_DATA_REDIS_HOST: cache
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_DATABASE: 0
      SPRING_DATA_REDIS_TIMEOUT: 60000
      SPRING_DATA_REDIS_PASSWORD: my-password
    depends_on:
      db:
        condition: service_healthy
    networks:
      - bank-network
      - customer-network

  cache:
    image: redis:6.2-alpine
    restart: always
    container_name: customer-cache
    ports:
      - "6379:6379"
    environment:
      REDIS_PASSWORD: my-password
      REDIS_PORT: 6379
    volumes:
      - cache:/data
    networks:
      - customer-network
      - bank-network

  zookeeper:
    image: 'bitnami/zookeeper:3.9.1'
    container_name: customer-zookeeper
    expose:
      - 2181
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - customer-network
    volumes:
      - zookeeper_data:/bitnami

  kafka:
    depends_on:
      - zookeeper
    image: 'bitnami/kafka:3.6.0'
    container_name: customer-kafka
    expose:
      - "9092"
      - "29092"
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: 'true'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://:9092,PLAINTEXT_EXTERNAL://:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://host.docker.internal:9092,PLAINTEXT_EXTERNAL://localhost:29092
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_HOSTNAME: kafka
    networks:
      - customer-network
      - bank-network
    volumes:
      - kafka_data:/bitnami/kafka

  pgadmin:
    container_name: customer-pgadmin
    image: dpage/pgadmin4:7
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - customer-network

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8083:8080"
    environment:
      DYNAMIC_CONFIG_ENABLED: true
    networks:
      - customer-network
      - bank-network
    volumes:
      - kafka_ui_data:/etc/kafkaui

volumes:
  db_data:
    driver: local
  pgadmin_data:
    driver: local
  cache:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  kafka_ui_data:
    driver: local
